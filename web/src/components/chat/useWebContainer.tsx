import { useState, useEffect } from 'react';
import { WebContainer } from '@webcontainer/api';
import { GeneratedFiles } from './types';

export function useWebContainer() {
  const [webcontainerInstance, setWebcontainerInstance] = useState<WebContainer | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [previewLoading, setPreviewLoading] = useState(false);
  const [previewError, setPreviewError] = useState<string | null>(null);

  // Initialize WebContainer when the component mounts
  useEffect(() => {
    async function initWebContainer() {
      try {
        // Only initialize once
        if (!webcontainerInstance) {
          setPreviewLoading(true);
          // Create a new WebContainer instance
          const instance = await WebContainer.boot();
          setWebcontainerInstance(instance);
          setPreviewLoading(false);
        }
      } catch (err) {
        console.error('Failed to initialize WebContainer:', err);
        setPreviewError('Failed to initialize WebContainer. Please check console for details.');
        setPreviewLoading(false);
      }
    }

    initWebContainer();
  }, [webcontainerInstance]);

  const startPreview = async (generatedFiles: GeneratedFiles) => {
    if (!webcontainerInstance || Object.keys(generatedFiles).length === 0) {
      setPreviewError('No files generated or WebContainer not initialized');
      return;
    }

    setPreviewLoading(true);
    setPreviewError(null);
    
    try {
      // Prepare files for WebContainer
      const files: Record<string, { file: { contents: string } }> = {};
      
      // Add all generated files to the container
      Object.keys(generatedFiles).forEach(filePath => {
        if (generatedFiles[filePath]?.status === 'completed' && generatedFiles[filePath]?.parsedCode?.code) {
          files[filePath] = {
            file: {
              contents: generatedFiles[filePath].parsedCode!.code
            }
          };
        }
      });
      
      // Create a basic package.json if not present
      if (!files['package.json']) {
        files['package.json'] = {
          file: {
            contents: JSON.stringify({
              name: 'generated-app',
              version: '1.0.0',
              description: 'Generated by AI',
              main: 'index.js',
              scripts: {
                start: 'npx serve -s . -p 3000'
              },
              dependencies: {
                serve: '^14.0.0'
              }
            }, null, 2)
          }
        };
      }
      
      // Mount the files in the WebContainer
      await webcontainerInstance.mount(files);
      
      // Install dependencies
      const installProcess = await webcontainerInstance.spawn('npm', ['install']);
      const installExitCode = await installProcess.exit;
      
      if (installExitCode !== 0) {
        throw new Error('Failed to install dependencies');
      }
      
      // Start the development server
      await webcontainerInstance.spawn('npm', ['start']);
      
      // Get the URL of the development server
      webcontainerInstance.on('server-ready', (port, url) => {
        setPreviewUrl(url);
        setPreviewLoading(false);
      });
      
    } catch (err) {
      console.error('Failed to start preview:', err);
      setPreviewError('Failed to start preview server. Check the console for details.');
      setPreviewLoading(false);
    }
  };

  return {
    webcontainerInstance,
    previewUrl,
    previewLoading,
    previewError,
    startPreview,
    isReady: !!webcontainerInstance
  };
}
